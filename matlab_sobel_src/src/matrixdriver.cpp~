/*==============================================================
 *
 * MATRIXDRIVER.CPP
 * Sample driver code that calls a C++ shared library created using
 * the MATLAB Compiler. Refer to the MATLAB Compiler documentation
 * for more information on this
 *
 * This is the wrapper CPP code to call a shared library created 
 * using the MATLAB Compiler.
 *
 * Copyright 1984-2007 The MathWorks, Inc.
 *
 *============================================================*/

// Include the library specific header file as generated by the 
// MATLAB Compiler
#include "libmatrixp.h"
#include <cstdio>
#include <ctime>
#include "mclmcr.h"

int run_main(int argc, const char **argv)
{
    // Call application and library initialization. Perform this 
    // initialization before calling any API functions or
    // Compiler-generated libraries.
    if (!mclInitializeApplication(NULL,0)) 
    {
        std::cerr << "could not initialize the application properly"
                   << std::endl;
    	return -1;
    }
    if( !libmatrixpInitialize() )
    {
        std::cerr << "could not initialize the library properly"
                   << std::endl;
	return -1;
    }
    else
    {
        try
        {
			   time_t start,end;
            
            // Create input data
            const char* fname_in=argv[1];
            mwArray mxFilenameIn(fname_in);
			   const char* fname_out=argv[2];
            mwArray mxFilenameOut(fname_out);
			   mwArray option((double)1);
				
				std::cout << "in: " << mxFilenameIn << std::endl;
				std::cout << "out: " << mxFilenameOut << std::endl;
				
				// Create output array
            mwArray out;
         
				// Call the library function
				start = time (NULL);
            processing(1,out,mxFilenameIn, mxFilenameOut, option);
            end = time (NULL);
				
			   printf ("%ld elapsed seconds\n", end-start);
				 std::cout << "output: " << out << std::endl;
				
        }
        catch (const mwException& e)
        {
          std::cerr << e.what() << std::endl;
          return -2;
        }
        catch (...)
        {
          std::cerr << "Unexpected error thrown" << std::endl;
          return -3;
        }     
        // Call the application and library termination routine
        libmatrixpTerminate();
    }
/* Note that you should call mclTerminate application at the end of
 * your application. 
 */
    mclTerminateApplication();
    return 0;
}

int main(int argc, char **argv)
{
    mclmcrInitialize();
	 const
    return mclRunMain((mclMainFcnType)run_main,argc,argv);
}
